Claude Prompt Engineering: SwipeHire
工作流 Dashboard 功能實現
任務概述
本任務旨在指導 Claude 逐步實現 SwipeHire 平台中的「工作流 Dashboard」功能。此功
能旨在解決現有招聘功能分散的問題，通過提供一個可視化的低代碼工作流平台，讓用戶能
夠拖拽卡片和連線的方式自定義招聘流程，並整合簡歷管理、職位發布、人才分析等零散功
能。Claude 需要根據以下詳細的功能目標、功能架構與核心模塊、關鍵功能細節設計、用
戶體驗流程和關鍵技術與實現要點，提供可執行的程式碼（包括前端、後端和數據庫相關部
分），並確保程式碼的模組化、可擴展性和穩定性。
1. 核心創意與目標
1.1 創意來源
借鑒 n8n 等工作流工具的可視化拖拽思路，打造招聘領域的低代碼工作流平台，讓用戶通
過拖拽卡片和連線的方式 DIY 招聘流程，整合簡歷管理、職位發布、人才分析等零散功能。
1.2 核心目標
提升招聘效率： 通過自動化流程減少人工操作。
增強靈活性： 支持企業自定義符合自身需求的招聘流程。
數據驅動決策： 整合數據變量與可視化分析，優化招聘策略。
降低使用門檻： 採用類似 Scratch 的可視化交互，實現 "所見即所得" 的流程配置。
2. 功能架構與核心模塊
2.1 工作流引擎基礎能力
卡片組件體系：
觸發類： 新簡歷提交、職位狀態變更、數據指標變化。
操作類： 分析簡歷、發送邀請、更新狀態、調用 AI。
判斷類： 條件分支（如匹配度 > 80%）、循環邏輯。
數據類： 公司觸及數、收到簡歷數等統計變量。
可視化編輯：
拖拽式卡片布局與連線。
條件邏輯配置（支持與 / 或 / 非組合）。
變量引用機制（如 {match_score} ）。
執行與監控：
流程自動化運行。
實時進度追踪。
異常處理與重試機制。
2.2 簡歷分析核心流程
多類型簡歷處理：
文本簡歷： OCR 提取 + Mistral NLP 分析關鍵詞。
視頻簡歷： 語音轉文字 + 情感分析（自信度評分）。
篩選條件配置：
基礎條件： 學歷、工作經驗、技能關鍵詞。
高級條件： 匹配度閾值、視頻分析結果。
結果輸出與聯動：
簡歷分類（通過 / 待復審 / 拒絕）。
變量輸出（ {match_score} 、 {skills} 等）。
後續動作觸發（發送面試邀請、添加到人才庫）。
2.3 數據變量與可視化
核心數據指標：
公司觸及數： 近 30 天看到職位的獨立用戶數。
收到簡歷數： 有效投遞數量。
匹配度分數： AI 分析生成的候選人匹配度。
數據驅動流程：
條件觸發：如 "單月觸及數下降 20%→更換模板"。
動態模板推薦：根據數據問題匹配解決方案。
Dashboard 可視化：
條形圖對比：企業數據 VS 行業均值。
異常預警：紅色橫幅 + 優化建議。
數據報告導出：PDF 格式的招聘效果分析。
2.4 模板生態與協作
模板體系：
官方認證模板： 由頭部企業 HR 設計。
用戶自創模板： 支持共享與審核。
分類標籤： 按行業、崗位、場景分類。
協作與權限：
多人編輯鎖機制。
角色級權限控制（管理員 / 普通 HR）。
跨部門協作配置（如技術部門僅修改技術相關節點）。
3. 關鍵功能細節設計
3.1 卡片配置交互
分析簡歷卡片： ┌──────────────────────────────┐ │ 分析簡歷 卡片 │
├──────────────────────────────┤ │ ▢ 學歷要求：大學及以上 │ │ ▢ 工作經驗：
3年以上 │ │ ▢ 技能關鍵詞： │ │ ▸ Python ▸ 數據分析 ▸ ... │ │ ▢ 啟用AI視頻分
析（選填） │ │ ▢ 匹配度閾值：70%（可拖動） │
└──────────────────────────────┘
條件邏輯配置： ┌──────────────────────┐ │ 條件設置： │ │ 如果
{match_score} │ │ 大於 │ │ 80 │ │ 則執行「發送面試邀請」│
└──────────────────────┘
3.2 變量體系設計
基礎變量：
{match_score} ：AI 匹配度評分（0-100）。
{degree} ：學歷（本科 / 碩士等）。
{skills} ：技能關鍵詞數組。
視頻專屬變量：
{video_confidence} ：語氣自信度（0-100）。
{video_keywords} ：視頻中提到的關鍵詞。
數據統計變量：
{company_reach} ：公司觸及數。
{resume_count} ：收到簡歷數。
3.3 模板與 AI 聯動
面試邀請模板： 尊敬的{候選人姓名}， 您的{match_score}分匹配度符合我們
{position_name}崗位要求。 AI建議面試重點：{ai_suggestion}
AI Prompt 示例： 你是資深技術面試官，候選人申請{position_name}崗位，簡歷關鍵
詞：{skills}。 請生成3個面試問題，重點考察{最缺技能}，用簡潔專業的語言呈現。
3.4 商業化設計
付費版本差異：
免費版： 5 個自定義工作流 + 基礎模板。
專業版： 20 個工作流 + 行業模板庫 + 高級 AI 節點。
企業版： 無限工作流 + 私有模板倉 + 專屬模型訓練。
增值服務：
AI 分析擴展（如增加技能分析維度）。
私有化部署。
專屬 HR 流程優化諮詢。
4. 用戶體驗流程
4.1 核心使用流程
1. 進入工作流 Dashboard，拖拽卡片到畫布。
2. 配置卡片參數（如分析簡歷的篩選條件）。
3. 連接卡片形成邏輯鏈路（如篩選→面試邀請）。
4. 運行工作流，實時查看進度。
5. 查看結果並執行後續動作（如批量發送邀請）。
4.2 數據驅動優化流程
1. Dashboard 展示數據指標（觸及數、簡歷數）。
2. 配置數據觸發條件（如觸及數下降 20%）。
3. 工作流自動執行優化動作（更換模板）。
4. 新模板效果追踪（數據回升情況）。
5. 持續迭代流程配置。
4.3 模板使用流程
1. 瀏覽模板市場（按行業 / 崗位分類）。
2. 選擇模板並查看效率評分。
3. 複製模板到個人工作區。
4. 自定義調整模板細節。
5. 保存並運行模板。
5. 關鍵技術與實現要點
5.1 前端實現
拖拽引擎： 基於 ReactFlow 實現可視化畫布。
交互設計： 採用 Scratch 式低門檻操作邏輯。
響應式布局： 適配移動端的點擊式連線交互。
5.2 後端能力
AI 集成： 調用 Mistral API 進行 NLP 分析。
數據處理： 實時統計公司觸及數、簡歷數等指標。
工作流引擎： 基於 DAG（有向無環圖）實現流程執行。
5.3 數據安全
加密策略： AES-256 存儲加密 + TLS 傳輸加密。
權限控制： 角色級數據隔離（如子公司數據獨立）。
合規支持： GDPR 數據主體請求處理流程。
6. 下一步行動計劃 (MVP 範圍)
6.1 MVP 範圍
核心卡片： 分析簡歷、條件判斷、發送邀請。
基礎變量： 匹配度、學歷、技能。
簡單模板： 技術崗 / 運營崗基礎篩選流程。
數據指標： 收到簡歷數的基本統計與顯示。
6.2 驗證指標
用戶完成工作流配置的平均時間。
模板的複用率與分享率。
使用工作流後招聘效率提升的量化數據。
用戶對可視化操作的滿意度評分。
6.3 風險與應對
技術風險： 工作流引擎穩定性→先實現簡單邏輯，逐步迭代。
認知風險： 用戶不熟悉工作流概念→強化模板引導與教程。
效率風險： 配置時間過長→優化默認參數與智能推薦。
7. Claude 實施步驟與子任務
為了確保 Claude 能夠清晰理解並逐步實現此功能，我們將任務拆解為以下主要步驟和子任
務。Claude 需要針對每個子任務提供詳細的程式碼實現方案和解釋。
7.1 數據庫設計 (MongoDB Atlas)
任務目標： 設計並定義儲存工作流、卡片、變量和模板相關數據的 MongoDB 集合結構。
子任務：
1. Workflows Collection (工作流集合)：
定義 workflows 集合的 Schema，包含以下字段：
_id : ObjectId (自動生成)
userId : String (關聯用戶 ID)
name : String (工作流名稱)
description : String (工作流描述)
nodes : Array (工作流中的卡片節點，包含卡片類型、配置參數、位置等)
edges : Array (卡片之間的連線，定義流程走向)
status : String (工作流狀態，例如: draft , active , paused )
createdAt : Date (創建時間)
updatedAt : Date (更新時間)
isTemplate : Boolean (是否為模板)
templateId : String (如果為用戶自創模板，關聯的官方模板 ID)
visibility : String (模板可見性，例如: private , public )
tags : Array of String (分類標籤)
2. Cards Collection (卡片組件定義集合 - 系統預設)：
定義 cards 集合的 Schema，儲存所有可用的卡片組件的元數據。
_id : ObjectId (自動生成)
type : String (卡片類型，例如: trigger , action , condition , data )
name : String (卡片顯示名稱，例如: 分析簡歷 , 發送邀請 )
description : String (卡片功能描述)
configSchema : JSON (定義卡片的配置參數，用於前端渲染表單和後端驗
證)
inputVariables : Array of String (卡片輸入變量)
outputVariables : Array of String (卡片輸出變量)
3. Variables Collection (變量定義集合 - 系統預設)：
定義 variables 集合的 Schema，儲存所有系統預設變量的元數據。
_id : ObjectId (自動生成)
name : String (變量名稱，例如: match_score , company_reach )
type : String (變量類型，例如: number , string , array )
description : String (變量描述)
4. Templates Collection (模板集合 - 擴展自 Workflows Collection)：
說明 templates 集合如何基於 workflows 集合，並添加額外字段：
official : Boolean (是否為官方認證模板)
efficiencyScore : Number (效率評分)
usageCount : Number (使用次數)
authorId : String (模板創建者 ID)
7.2 後端 API 設計 (Node.js + Express.js)
任務目標： 設計並實現用於管理工作流、卡片、變量和模板的 RESTful API 接口。
子任務：
1. 工作流管理 API ( /api/workflows ):
POST /api/workflows : 創建新工作流。
GET /api/workflows : 獲取用戶工作流列表，支持篩選、排序、分頁。
GET /api/workflows/:id : 獲取單個工作流詳情。
PUT /api/workflows/:id : 更新工作流（包括節點、連線、配置）。
DELETE /api/workflows/:id : 刪除工作流。
POST /api/workflows/:id/run : 運行工作流。
GET /api/workflows/:id/status : 獲取工作流運行狀態。
2. 卡片/變量元數據 API ( /api/meta ):
GET /api/meta/cards : 獲取所有可用卡片組件的定義。
GET /api/meta/variables : 獲取所有系統預設變量的定義。
3. 模板市場 API ( /api/templates ):
GET /api/templates : 獲取模板列表，支持按行業、崗位、場景分類，以及效
率評分、使用次數排序。
POST /api/templates/:id/copy : 複製模板到用戶個人工作區。
POST /api/templates/:id/share : 用戶自創模板共享（需審核）。
4. 數據指標 API ( /api/metrics ):
GET /api/metrics/company-reach : 獲取公司觸及數。
GET /api/metrics/resume-count : 獲取收到簡歷數。
GET /api/metrics/match-score-distribution : 獲取匹配度分數分佈。
7.3 前端 UI 組件 (React.js)
任務目標： 開發前端 UI 組件以支持用戶與「工作流 Dashboard」功能的交互。
子任務：
1. 工作流 Dashboard 主頁：
布局： 左側導航欄（我的工作流、模板市場、數據看板），中間畫布區域，右側
卡片/屬性配置面板。
交互： 拖拽卡片到畫布，連線。
2. 卡片組件庫：
實現各種類型的卡片組件（觸發、操作、判斷、數據），可拖拽。
每個卡片組件應能根據其 configSchema 動態渲染配置表單。
3. 連線組件：
實現卡片之間的連線功能，支持條件邏輯（如 true/false 分支）。
支持點擊式連線交互（移動端）。
4. 屬性配置面板：
當選中畫布上的卡片時，右側面板顯示該卡片的詳細配置選項。
支持變量引用輸入。
5. 數據看板組件：
實現條形圖、折線圖等可視化組件，展示核心數據指標。
實現異常預警（紅色橫幅）和優化建議的顯示。
6. 模板市場組件：
展示官方和用戶自創模板列表，支持分類、搜索、排序。
模板詳情頁面，包含效率評分、使用次數、預覽等。
「複製模板」和「共享模板」按鈕。
7.4 後端工作流引擎與 AI 集成
任務目標： 實現後端工作流的執行邏輯和 AI 服務集成。
子任務：
1. 工作流執行器：
基於 DAG 實現流程執行，確保節點按正確順序執行。
實現狀態管理，追踪每個節點的執行進度。
實現異常處理和重試機制。
2. 簡歷分析服務：
集成 OCR 服務（例如 Google Cloud Vision API 或開源庫）提取文本簡歷內容。
調用 Mistral API 進行 NLP 分析，提取關鍵詞、技能等。
集成語音轉文字服務（例如 Google Cloud Speech-to-Text）處理視頻簡歷。
集成情感分析服務（例如基於文本或語音的情感分析模型）評估語氣自信度。
3. AI 智能推薦服務：
實現 AI Prompt 示例中提到的功能，根據技能生成面試問題。
實現動態模板推薦邏輯，根據數據問題匹配解決方案。
7.5 數據安全與權限控制
任務目標： 確保數據安全和實現精細化的權限控制。
子任務：
1. 數據加密：
實現數據庫層面的 AES-256 存儲加密。
確保所有數據傳輸使用 TLS 加密。
2. 角色級權限控制：
定義用戶角色（管理員、普通 HR、技術 HR 等）。
實現基於角色的 API 訪問控制。
實現數據隔離，確保用戶只能訪問其有權限的數據（例如子公司數據獨立）。
3. 協作鎖機制：
實現多人編輯工作流時的鎖機制，防止衝突。
8. 總結與注意事項
錯誤處理： 所有 API 接口和後端服務都應包含完善的錯誤處理機制。
安全性： 確保用戶數據的安全性，特別是在處理敏感信息時。
可擴展性： 考慮未來功能擴展的可能性，使程式碼結構清晰、模組化。
測試： 建議為關鍵功能編寫單元測試和集成測試。
Claude，請根據上述詳細說明，逐步提供每個子任務的程式碼實現方案和必要的解釋。請
從數據庫設計開始，每個部分完成後請等待我的確認。
7.2 後端 API 設計 (Node.js + Express.js)
任務目標： 設計並實現用於管理工作流、卡片、變量和模板的 RESTful API 接口。
子任務：
1. 工作流管理 API ( /api/workflows ):
POST /api/workflows : 創建新工作流。
GET /api/workflows : 獲取用戶工作流列表，支持篩選、排序、分頁。
GET /api/workflows/:id : 獲取單個工作流詳情。
PUT /api/workflows/:id : 更新工作流（包括節點、連線、配置）。
DELETE /api/workflows/:id : 刪除工作流。
POST /api/workflows/:id/run : 運行工作流。
GET /api/workflows/:id/status : 獲取工作流運行狀態。
2. 卡片/變量元數據 API ( /api/meta ):
GET /api/meta/cards : 獲取所有可用卡片組件的定義。
GET /api/meta/variables : 獲取所有系統預設變量的定義。
3. 模板市場 API ( /api/templates ):
GET /api/templates : 獲取模板列表，支持按行業、崗位、場景分類，以及效
率評分、使用次數排序。
POST /api/templates/:id/copy : 複製模板到用戶個人工作區。
POST /api/templates/:id/share : 用戶自創模板共享（需審核）。
4. 數據指標 API ( /api/metrics ):
GET /api/metrics/company-reach : 獲取公司觸及數。
GET /api/metrics/resume-count : 獲取收到簡歷數。
GET /api/metrics/match-score-distribution : 獲取匹配度分數分佈。
7.3 前端 UI 組件 (React.js)
任務目標： 開發前端 UI 組件以支持用戶與「工作流 Dashboard」功能的交互。
子任務：
1. 工作流 Dashboard 主頁：
布局： 左側導航欄（我的工作流、模板市場、數據看板），中間畫布區域，右側
卡片/屬性配置面板。
交互： 拖拽卡片到畫布，連線。
2. 卡片組件庫：
實現各種類型的卡片組件（觸發、操作、判斷、數據），可拖拽。
每個卡片組件應能根據其 configSchema 動態渲染配置表單。
3. 連線組件：
實現卡片之間的連線功能，支持條件邏輯（如 true/false 分支）。
支持點擊式連線交互（移動端）。
4. 屬性配置面板：
當選中畫布上的卡片時，右側面板顯示該卡片的詳細配置選項。
支持變量引用輸入。
5. 數據看板組件：
實現條形圖、折線圖等可視化組件，展示核心數據指標。
實現異常預警（紅色橫幅）和優化建議的顯示。
6. 模板市場組件：
展示官方和用戶自創模板列表，支持分類、搜索、排序。
模板詳情頁面，包含效率評分、使用次數、預覽等。
「複製模板」和「共享模板」按鈕。
7.4 後端工作流引擎與 AI 集成
任務目標： 實現後端工作流的執行邏輯和 AI 服務集成。
子任務：
1. 工作流執行器：
基於 DAG 實現流程執行，確保節點按正確順序執行。
實現狀態管理，追踪每個節點的執行進度。
實現異常處理和重試機制。
2. 簡歷分析服務：
集成 OCR 服務（例如 Google Cloud Vision API 或開源庫）提取文本簡歷內容。
調用 Mistral API 進行 NLP 分析，提取關鍵詞、技能等。
集成語音轉文字服務（例如 Google Cloud Speech-to-Text）處理視頻簡歷。
集成情感分析服務（例如基於文本或語音的情感分析模型）評估語氣自信度。
3. AI 智能推薦服務：
實現 AI Prompt 示例中提到的功能，根據技能生成面試問題。
實現動態模板推薦邏輯，根據數據問題匹配解決方案。
7.5 數據安全與權限控制
任務目標： 確保數據安全和實現精細化的權限控制。
子任務：
1. 數據加密：
實現數據庫層面的 AES-256 存儲加密。
確保所有數據傳輸使用 TLS 加密。
2. 角色級權限控制：
定義用戶角色（管理員、普通 HR、技術 HR 等）。
實現基於角色的 API 訪問控制。
實現數據隔離，確保用戶只能訪問其有權限的數據（例如子公司數據獨立）。
3. 協作鎖機制：
實現多人編輯工作流時的鎖機制，防止衝突。
8. 總結與注意事項
錯誤處理： 所有 API 接口和後端服務都應包含完善的錯誤處理機制。
安全性： 確保用戶數據的安全性，特別是在處理敏感信息時。
可擴展性： 考慮未來功能擴展的可能性，使程式碼結構清晰、模組化。
測試： 建議為關鍵功能編寫單元測試和集成測試。
Claude，請根據上述詳細說明，逐步提供每個子任務的程式碼實現方案和必要的解釋。請
從數據庫設計開始，每個部分完成後請等待我的確認。