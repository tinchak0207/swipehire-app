// swipehire-backend/Match.js
const mongoose = require('mongoose');

const MatchSchema = new mongoose.Schema({
    userA_Id: { // MongoDB _id of one user in the match (e.g., recruiter)
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
    },
    userB_Id: { // MongoDB _id of the other user in the match (e.g., job seeker)
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
    },
    // Store the display IDs from mockData or other profile collections.
    // These help the frontend quickly find the corresponding mock data for display.
    candidateProfileIdForDisplay: { // e.g., 'cand1'
        type: String,
        required: true,
    },
    companyProfileIdForDisplay: { // e.g., 'comp1'
        type: String,
        required: true,
    },
    // Optional: specific job opening title if the match was for a particular job
    jobOpeningTitle: {
        type: String,
    },
    matchedAt: {
        type: Date,
        default: Date.now,
    },
    status: {
        type: String,
        enum: ['active', 'archived_by_A', 'archived_by_B', 'archived_by_both'],
        default: 'active',
    },
    // A key to ensure uniqueness of a match pair (userA_Id + userB_Id)
    // Generated by sorting the two user ObjectIds alphabetically and joining them.
    uniqueMatchKey: {
        type: String,
        unique: true,
        required: true,
        index: true,
    }
}, { timestamps: true });


module.exports = mongoose.model('Match', MatchSchema);
