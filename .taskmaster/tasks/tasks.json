{
  "master": {
    "tasks": [
      {
        "id": 22,
        "title": "Project Setup & Core Dependencies",
        "description": "Set up the Next.js project environment, install core dependencies including TailwindCSS, DaisyUI, Biome for linting/formatting, and initial testing libraries (Jest, React Testing Library, Cypress/Playwright, axe-core). Configure Tailwind and DaisyUI.",
        "details": "Initialize Next.js project. Install dependencies: `npm install daisyui tailwindcss @dnd-kit/core @tanstack/react-query zustand next-i18next multer next-connect heroicons/react lucide-react classnames date-fns uuid jest @testing-library/react @testing-library/jest-dom cypress axe-core jest-axe biome`. Run `npx tailwindcss init -p` and add `daisyui` plugin to `tailwind.config.js`. Configure Biome and potentially set up pre-commit hooks.",
        "testStrategy": "Verify dependencies are installed correctly. Run Biome check/format. Ensure Tailwind/DaisyUI classes are applied correctly in a test component. Verify testing libraries are set up for basic runs.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Define Core TypeScript Types & Interfaces",
        "description": "Define all necessary TypeScript types and interfaces for Portfolio, Project, Media (Image, Video, Audio), ExternalLink, PortfolioStats, Comment, and PortfolioLayout as specified in the PRD. Ensure strict TypeScript settings are enabled.",
        "details": "Create `/lib/types/portfolio.ts`. Define interfaces: `Portfolio`, `Project`, `ExternalLink`, `PortfolioStats`, `Comment`. Define discriminated union `Media` and its variants (`ImageMedia`, `VideoMedia`, `AudioMedia`). Define union type `PortfolioLayout`. Enable `strict: true` in `tsconfig.json`. Add JSDoc for complex types.",
        "testStrategy": "Compile the project to ensure no TypeScript errors. Use types in mock data to verify structure correctness. Ensure `strict: true` is enforced.",
        "priority": "high",
        "dependencies": [22],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Core Portfolio/Project API Endpoints (CRUD)",
        "description": "Implement the core API endpoints for Portfolio and Project CRUD operations using Next.js API routes and either tRPC or REST. Include data validation and authentication middleware.",
        "details": "Create API routes under `/pages/api/portfolio`. Implement `GET /api/portfolio`, `POST /api/portfolio`, `GET /api/portfolio/[id]`, `PUT /api/portfolio/[id]`, `DELETE /api/portfolio/[id]`. Use Zod or Yup for schema validation on incoming data. Implement authentication middleware to protect mutating endpoints.",
        "testStrategy": "Use integration tests (e.g., Jest) to test each API endpoint with valid and invalid data. Verify authentication middleware blocks unauthorized access. Test edge cases like non-existent IDs.",
        "priority": "high",
        "dependencies": [23],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Implement Media Upload API & Component",
        "description": "Implement the API endpoint and client-side logic for handling media file uploads, including validation and progress tracking.",
        "details": "Create API route `POST /api/portfolio/upload`. Use `multer` or `next-connect` to handle file uploads. Implement validation for file type, size, and potentially malware scanning. Develop a `MediaUploader.tsx` component that uses DaisyUI FileInput, displays upload progress (spinner/progress bar), and handles errors. Use `next/image` for displaying uploaded images.",
        "testStrategy": "Test API endpoint with various file types (valid/invalid) and sizes. Test client component for successful uploads, upload failures, and progress display. Verify uploaded images are displayed correctly using `next/image`.",
        "priority": "high",
        "dependencies": [24],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Develop Data Fetching/Mutation Hooks (React Query)",
        "description": "Develop React Query hooks for fetching, creating, updating, and deleting portfolios and projects, as well as handling media uploads. Centralize loading and error states.",
        "details": "Create hooks like `usePortfolios`, `usePortfolio`, `useCreatePortfolio`, `useUpdatePortfolio`, `useDeletePortfolio`, `useUploadMedia` using `@tanstack/react-query`. Configure queries and mutations with appropriate caching, retries, and error handling. Integrate with the API endpoints developed in tasks 24 and 25.",
        "testStrategy": "Test hooks in isolation using mock API responses. Verify data fetching, mutation, loading, and error states are handled correctly. Ensure caching and invalidation work as expected.",
        "priority": "high",
        "dependencies": [24, 25],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Build Portfolio Dashboard Page",
        "description": "Build the Portfolio Dashboard page (`/portfolio`) to list user portfolios and provide actions like 'Create New Portfolio', Edit, Delete, and Share. Use DaisyUI components.",
        "details": "Create `/pages/portfolio/index.tsx`. Use `usePortfolios` hook to fetch data. Display portfolios in a DaisyUI Table or List component. Add a DaisyUI Button (`btn-primary`) for 'Create New Portfolio' linking to `/portfolio/new`. Implement Edit/Delete/Share actions using a DaisyUI Dropdown.",
        "testStrategy": "Verify portfolios are listed correctly. Test 'Create New Portfolio' button navigates to the correct page. Test dropdown actions are present (functionality implemented later). Test loading and empty states.",
        "priority": "medium",
        "dependencies": [26],
        "status": "completed",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Build Portfolio Editor Page & Core Structure",
        "description": "Build the main Portfolio Editor page (`/portfolio/new`, `/portfolio/edit/[id]`) and the core `PortfolioEditor` component structure, including basic fields (Title, Description, Tags), a placeholder for LayoutSelector, and the structure for the Project list.",
        "details": "Create `/pages/portfolio/new.tsx` and `/pages/portfolio/edit/[id].tsx`. Develop the `PortfolioEditor.tsx` component. Use DaisyUI Card/Form for the structure. Include DaisyUI Input/Textarea for Title/Description. Add a basic input/chips structure for Tags. Include a placeholder area for LayoutSelector. Structure the area for listing and adding Projects (using DaisyUI List). Implement state management (Zustand/Context) for the draft portfolio data.",
        "testStrategy": "Verify the editor page loads correctly for new and existing portfolios (fetching data via hook). Test input fields update the local draft state. Verify the basic structure and placeholders are rendered correctly.",
        "priority": "high",
        "dependencies": [26, 27],
        "status": "completed",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Build Project Editor Component & Integrate Media/Links",
        "description": "Develop the `ProjectEditor` sub-component used within the `PortfolioEditor`. Include fields for Title, Description, External Links, Tags, and integrate the `MediaUploader` component.",
        "details": "Create `ProjectEditor.tsx` component. Include input fields for Project Title and Description. Add functionality to manage External Links (type, URL, label) using DaisyUI components. Add Tag input/chips for projects. Integrate the `MediaUploader` component to handle media for each project. Ensure project data updates the parent portfolio draft state.",
        "testStrategy": "Test adding/editing/removing project details within the component. Verify media upload integration works correctly within a project. Test adding/managing external links and tags for a project. Ensure changes are reflected in the parent editor's state.",
        "priority": "high",
        "dependencies": [25, 28],
        "status": "completed",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Implement Drag-and-Drop for Project Reordering",
        "description": "Implement drag-and-drop functionality for reordering projects within the Portfolio Editor using `@dnd-kit/core`.",
        "details": "Integrate `@dnd-kit/core` into the `PortfolioEditor` component's project list area. Wrap the project list items with dnd-kit components to enable dragging and dropping. Update the order property of projects in the local draft state based on drag-and-drop actions. Provide visual feedback during dragging (e.g., using DaisyUI transitions).",
        "testStrategy": "Test dragging and dropping projects to different positions. Verify the order is updated correctly in the local state. Test with multiple projects. Ensure visual feedback is present during drag.",
        "priority": "medium",
        "dependencies": [28, 29],
        "status": "completed",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Build Portfolio Preview Component",
        "description": "Build the `PortfolioPreview` component to display a real-time, responsive preview of the portfolio based on the current draft state in the editor, supporting different layouts.",
        "details": "Create `PortfolioPreview.tsx` component. This component should receive the draft portfolio data as props. Implement rendering logic to display projects and their media/details based on the selected `PortfolioLayout` ('grid', 'list', 'carousel'). Use DaisyUI Grid, List, and Carousel components. Ensure responsiveness using Tailwind utility classes (`sm:`, `md:`). Use `next/image` for images.",
        "testStrategy": "Verify the preview updates in real-time as the user edits. Test rendering for each layout type (grid, list, carousel). Test responsiveness across different screen sizes. Verify all project details and media are displayed correctly.",
        "priority": "medium",
        "dependencies": [28, 29, 30],
        "status": "completed",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-22T02:49:39.767Z",
      "updated": "2025-06-28T05:58:39.090Z",
      "description": "Tasks for master context"
    }
  }
}
